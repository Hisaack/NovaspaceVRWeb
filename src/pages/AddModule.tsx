import React, { useState } from 'react';
import { useParams, Link } from 'react-router-dom';
import { Plus, Edit, Trash2, Eye, Search, ChevronLeft, ChevronRight, AlertCircle, ArrowLeft, Clock, Play } from 'lucide-react';
import Modal from '../components/Modal';
import ApiService from '../services/ApiService';
import AuthService from '../services/AuthService';
import { uploadImage, deleteImage, getImageUrl } from '../utils/imageUpload';

interface ModuleFormData {
  title: string;
  description: string;
  longDescription: string;
  youtubeUrl: string;
  thumbnailFile: File | null;
  thumbnailUrl: string;
  sampleSize: string;
  estimatedTime: string;
  status: 'available' | 'coming-soon';
}

interface FormErrors {
  title?: string;
  description?: string;
  longDescription?: string;
  sampleSize?: string;
  estimatedTime?: string;
}

const AddModule: React.FC = () => {
  const { courseId } = useParams<{ courseId: string }>();
  const [modules, setModules] = useState<any[]>([]);
  const [course, setCourse] = useState<any>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [showAddModal, setShowAddModal] = useState(false);
  const [showEditModal, setShowEditModal] = useState(false);
  const [showViewModal, setShowViewModal] = useState(false);
  const [showDeleteModal, setShowDeleteModal] = useState(false);
  const [selectedModule, setSelectedModule] = useState<any>(null);
  const [modalMode, setModalMode] = useState<'add' | 'edit'>('add');
  const [searchTerm, setSearchTerm] = useState('');
  const [currentPage, setCurrentPage] = useState(1);
  const [itemsPerPage] = useState(6);
  const [imagePreview, setImagePreview] = useState<string | null>(null);
  const [errors, setErrors] = useState<FormErrors>({});
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [uploadError, setUploadError] = useState<string | null>(null);
  
  const [formData, setFormData] = useState<ModuleFormData>({
    title: '',
    description: '',
    longDescription: '',
    youtubeUrl: '',
    thumbnailFile: null,
    thumbnailUrl: '',
    sampleSize: '',
    estimatedTime: '',
    status: 'available'
  });

  // Load course and modules data from API
  React.useEffect(() => {
    const loadData = async () => {
      if (!courseId) return;
      
      try {
        setLoading(true);
        setError(null);
        
        // Load course info and modules in parallel
        const [courseData, modulesData] = await Promise.all([
          ApiService.getCourseById(courseId),
          ApiService.getCourseModules(courseId)
        ]);
        
        setCourse(courseData);
        setModules(modulesData);
      } catch (error) {
        console.error('Failed to load course data:', error);
        setError('Failed to load course data. Please try again.');
      } finally {
        setLoading(false);
      }
    };

    loadData();
  }, [courseId]);

  const generateModuleId = () => {
    // Module ID will be generated by the backend
    return '';
  };

  const resetForm = () => {
    setFormData({
      title: '',
      description: '',
      longDescription: '',
      youtubeUrl: '',
      thumbnailFile: null,
      thumbnailUrl: '',
      sampleSize: '',
      estimatedTime: '',
      status: 'available'
    });
    setImagePreview(null);
    setErrors({});
    setUploadError(null);
  };

  const validateForm = (): boolean => {
    const newErrors: FormErrors = {};

    if (!formData.title.trim()) {
      newErrors.title = 'Title is required';
    } else if (formData.title.trim().length < 3) {
      newErrors.title = 'Title must be at least 3 characters';
    }

    if (!formData.description.trim()) {
      newErrors.description = 'Description is required';
    } else if (formData.description.trim().length < 10) {
      newErrors.description = 'Description must be at least 10 characters';
    }

    if (!formData.longDescription.trim()) {
      newErrors.longDescription = 'Long description is required';
    } else if (formData.longDescription.trim().length < 50) {
      newErrors.longDescription = 'Long description must be at least 50 characters';
    }

    if (!formData.sampleSize) {
      newErrors.sampleSize = 'Sample size is required';
    } else {
      const sampleNum = parseInt(formData.sampleSize);
      if (isNaN(sampleNum) || sampleNum < 1 || sampleNum > 100) {
        newErrors.sampleSize = 'Sample size must be between 1 and 100';
      }
    }

    if (!formData.estimatedTime.trim()) {
      newErrors.estimatedTime = 'Estimated time is required';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleAddModule = () => {
    setModalMode('add');
    resetForm();
    setShowAddModal(true);
  };

  const handleEditModule = (module: any) => {
    setModalMode('edit');
    setSelectedModule(module);
    setFormData({
      title: module.title,
      description: module.description,
      longDescription: module.longDescription || '',
      youtubeUrl: module.youtubeUrl || '',
      thumbnailFile: null,
      thumbnailUrl: module.thumbnail || '',
      sampleSize: module.sampleSize.toString(),
      estimatedTime: module.estimatedTime.toString(), // Convert number to string for form
      status: module.status || 'available'
    });
    setImagePreview(getImageUrl(module.thumbnail));
    setShowEditModal(true);
  };

  const handleViewModule = (module: any) => {
    setSelectedModule(module);
    setShowViewModal(true);
  };

  const handleDeleteModule = (module: any) => {
    setSelectedModule(module);
    setShowDeleteModal(true);
  };

  const confirmDeleteModule = () => {
    if (selectedModule && courseId) {
      const deleteModule = async () => {
        try {
          await ApiService.deleteModule(courseId, selectedModule.id);
          
          // Reload modules after deletion
          const updatedModules = await ApiService.getCourseModules(courseId);
          setModules(updatedModules);
          
          setShowDeleteModal(false);
          setSelectedModule(null);
        } catch (error) {
          console.error('Error deleting module:', error);
          alert('Failed to delete module. Please try again.');
        }
      };
      
      deleteModule();
    }
  };

  const handleSaveModule = async () => {
    if (!validateForm()) {
      return;
    }
    
    // Check if there's an upload error
    if (uploadError) {
      return;
    }

    setIsSubmitting(true);
    setUploadError(null); // Clear any previous errors

    try {
      let thumbnailUrl = formData.thumbnailUrl;
      
      // Upload new image if file is selected
      if (formData.thumbnailFile) {
        const uploadResult = await uploadImage(formData.thumbnailFile, 'modules');
        if (uploadResult.success && uploadResult.url) {
          // Delete old image if updating and had previous image
          if (modalMode === 'edit' && selectedModule?.thumbnail && selectedModule.thumbnail !== thumbnailUrl) {
            await deleteImage(selectedModule.thumbnail);
          }
          thumbnailUrl = uploadResult.url;
        } else {
          setUploadError(uploadResult.error || 'Failed to upload image');
          setIsSubmitting(false);
          return;
        }
      }
      
      const moduleData = {
        title: formData.title,
        description: formData.description,
        longDescription: formData.longDescription,
        youtubeUrl: formData.youtubeUrl || null,
        thumbnail: thumbnailUrl || '/MobiusBackGround.jpg',
        sampleSize: parseInt(formData.sampleSize),
        estimatedTime: parseInt(formData.estimatedTime),
        status: formData.status
      };
      
      if (modalMode === 'add') {
        await ApiService.createModule(courseId || '', moduleData);
      } else {
        await ApiService.updateModule(courseId || '', selectedModule.id, moduleData);
      }
      
      // Reload modules after save
      const updatedModules = await ApiService.getCourseModules(courseId || '');
      setModules(updatedModules);
      
      setShowAddModal(false);
      setShowEditModal(false);
      resetForm();
    } catch (error) {
      console.error('Error saving module:', error);
      setUploadError('Failed to save module. Please try again.');
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleImageUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      // Clear previous errors
      setUploadError(null);
      
      // Validate file type
      const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/webp'];
      if (!allowedTypes.includes(file.type)) {
        setUploadError('Invalid file type. Please upload a JPEG, PNG, GIF, or WebP image.');
        return;
      }
      
      // Validate file size (5MB limit)
      const maxSize = 5 * 1024 * 1024; // 5MB
      if (file.size > maxSize) {
        setUploadError('File size too large. Please upload an image smaller than 5MB.');
        return;
      }
      
      setFormData({ ...formData, thumbnailFile: file });
      const reader = new FileReader();
      reader.onload = (e) => {
        setImagePreview(e.target?.result as string);
      };
      reader.readAsDataURL(file);
    }
  };

  const filteredModules = modules.filter(module =>
    module.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
    module.description.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const totalPages = Math.ceil(filteredModules.length / itemsPerPage);
  const startIndex = (currentPage - 1) * itemsPerPage;
  const paginatedModules = filteredModules.slice(startIndex, startIndex + itemsPerPage);

  // Auto-adjust page if current page becomes empty
  React.useEffect(() => {
    if (currentPage > 1 && paginatedModules.length === 0 && filteredModules.length > 0) {
      setCurrentPage(Math.max(1, Math.ceil(filteredModules.length / itemsPerPage)));
    }
  }, [filteredModules.length, currentPage, itemsPerPage, paginatedModules.length]);

  if (loading) {
    return (
      <div className="space-y-6">
        <div className="flex items-center gap-4 mb-4">
          <Link 
            to="/admin" 
            className="inline-flex items-center text-purple-600 hover:text-purple-800 dark:text-purple-400 dark:hover:text-purple-300 font-medium transition-colors duration-200"
          >
            <ArrowLeft className="h-4 w-4 mr-2" />
            Back to Admin
          </Link>
        </div>
        <div>
          <h1 className="text-3xl font-bold text-gray-900 dark:text-white">Module Management</h1>
          <p className="text-gray-600 dark:text-gray-400 mt-2">Loading...</p>
        </div>
        <div className="text-center py-12">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-purple-500 mx-auto mb-4"></div>
          <p className="text-gray-500 dark:text-gray-400">Loading course data...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="space-y-6">
        <div className="flex items-center gap-4 mb-4">
          <Link 
            to="/admin" 
            className="inline-flex items-center text-purple-600 hover:text-purple-800 dark:text-purple-400 dark:hover:text-purple-300 font-medium transition-colors duration-200"
          >
            <ArrowLeft className="h-4 w-4 mr-2" />
            Back to Admin
          </Link>
        </div>
        <div>
          <h1 className="text-3xl font-bold text-gray-900 dark:text-white">Module Management</h1>
          <p className="text-gray-600 dark:text-gray-400 mt-2">Course ID: {courseId}</p>
        </div>
        <div className="text-center py-12 bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700">
          <div className="text-red-500 mb-4">
            <AlertCircle className="h-16 w-16 mx-auto" />
          </div>
          <h3 className="text-lg font-medium text-gray-900 dark:text-white mb-2">Error Loading Course</h3>
          <p className="text-gray-500 dark:text-gray-400 mb-4">{error}</p>
          <button
            onClick={() => window.location.reload()}
            className="px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors duration-200"
          >
            Try Again
          </button>
        </div>
      </div>
    );
  }

  if (!course) {
    return (
      <div className="space-y-6">
        <div className="flex items-center gap-4 mb-4">
          <Link 
            to="/admin" 
            className="inline-flex items-center text-purple-600 hover:text-purple-800 dark:text-purple-400 dark:hover:text-purple-300 font-medium transition-colors duration-200"
          >
            <ArrowLeft className="h-4 w-4 mr-2" />
            Back to Admin
          </Link>
        </div>
        <div>
          <h1 className="text-3xl font-bold text-gray-900 dark:text-white">Course Not Found</h1>
          <p className="text-gray-600 dark:text-gray-400 mt-2">Course ID: {courseId}</p>
        </div>
        <div className="text-center py-12 bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700">
          <div className="text-gray-400 dark:text-gray-500 mb-4">
            <AlertCircle className="h-16 w-16 mx-auto" />
          </div>
          <h3 className="text-lg font-medium text-gray-900 dark:text-white mb-2">Course Not Found</h3>
          <p className="text-gray-500 dark:text-gray-400">The requested course could not be found or you don't have access to it.</p>
        </div>
      </div>
    );
  }

  const ErrorMessage = ({ error }: { error?: string }) => {
    if (!error) return null;
    return (
      <div className="flex items-center mt-1 text-sm text-red-600 dark:text-red-400">
        <AlertCircle className="h-4 w-4 mr-1" />
        {error}
      </div>
    );
  };

  return (
    <div className="space-y-6">
      {/* Header */}
      <div>
        <div className="flex items-center gap-4 mb-4">
          <Link 
            to="/admin" 
            className="inline-flex items-center text-purple-600 hover:text-purple-800 dark:text-purple-400 dark:hover:text-purple-300 font-medium transition-colors duration-200"
          >
            <ArrowLeft className="h-4 w-4 mr-2" />
            Back to Admin
          </Link>
        </div>
        <div className="flex justify-between items-center">
          <div>
            <h1 className="text-3xl font-bold text-gray-900 dark:text-white">
              {course?.title || 'Course'} - Module Management
            </h1>
            <p className="text-gray-600 dark:text-gray-400 mt-2">
              Manage training modules for this course
            </p>
          </div>
          <button
            onClick={handleAddModule}
            className="inline-flex items-center px-4 py-2 bg-gradient-to-r from-purple-500 to-blue-500 text-white rounded-lg text-sm font-medium hover:from-purple-600 hover:to-blue-600 transition-all duration-200 hover:scale-105 shadow-lg hover:shadow-xl"
          >
            <Plus className="h-4 w-4 mr-2" />
            Add Module
          </button>
        </div>
      </div>

      {/* Course Info Card */}
      {course && (
        <div className="bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700 p-6 transition-colors duration-200">
          <div className="flex items-center justify-between">
            <div>
              <h2 className="text-xl font-semibold text-gray-900 dark:text-white mb-2">
                {course.title}
              </h2>
              <p className="text-gray-600 dark:text-gray-400 mb-4">
                {course.description}
              </p>
              <div className="flex items-center space-x-6 text-sm text-gray-500 dark:text-gray-400">
                <div className="flex items-center">
                  <Play className="h-4 w-4 mr-1" />
                  {modules.length} modules
                </div>
                <div className="flex items-center">
                  <Clock className="h-4 w-4 mr-1" />
                  {course.targetTime} total
                </div>
              </div>
            </div>
            <span className="text-xs font-medium text-purple-600 dark:text-purple-400 bg-purple-100 dark:bg-purple-900/30 px-3 py-1 rounded-full">
              {course.code}
            </span>
          </div>
        </div>
      )}

      {/* Search and Filters */}
      <div className="bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700 p-6 transition-colors duration-200">
        <div className="flex items-center justify-between">
          <div className="relative flex-1 max-w-md">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4" />
            <input
              type="text"
              placeholder="Search modules..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="w-full pl-10 pr-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent dark:bg-gray-700 dark:text-white transition-all duration-200"
            />
          </div>
          <div className="text-sm text-gray-500 dark:text-gray-400">
            {filteredModules.length} module{filteredModules.length !== 1 ? 's' : ''} found
          </div>
        </div>
      </div>

      {/* Modules Grid */}
      <div className="bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700 transition-colors duration-200">
        {paginatedModules.length === 0 ? (
          <div className="text-center py-12">
            <AlertCircle className="h-16 w-16 text-gray-400 dark:text-gray-500 mx-auto mb-4" />
            <h3 className="text-xl font-semibold text-gray-600 dark:text-gray-400 mb-2">
              {searchTerm ? 'No modules found' : 'No modules yet'}
            </h3>
            <p className="text-gray-500 dark:text-gray-400 mb-6">
              {searchTerm 
                ? `No modules match your search for "${searchTerm}"`
                : 'Start by adding your first module to this course'
              }
            </p>
            {!searchTerm && (
              <button
                onClick={handleAddModule}
                className="inline-flex items-center px-4 py-2 bg-gradient-to-r from-purple-500 to-blue-500 text-white rounded-lg text-sm font-medium hover:from-purple-600 hover:to-blue-600 transition-all duration-200 hover:scale-105 shadow-lg hover:shadow-xl"
              >
                <Plus className="h-4 w-4 mr-2" />
                Add First Module
              </button>
            )}
          </div>
        ) : (
          <>
            <div className="p-6">
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                {paginatedModules.map((module) => (
                  <div key={module.id} className="bg-gray-50 dark:bg-gray-700/50 rounded-lg overflow-hidden hover:bg-gray-100 dark:hover:bg-gray-600/50 transition-all duration-200 group">
                    <div className="aspect-video overflow-hidden">
                      <img
                        src={getImageUrl(module.thumbnail)}
                        alt={module.title}
                        className="w-full h-full object-cover"
                      />
                    </div>
                    <div className="p-4">
                      <div className="flex justify-between items-start mb-2">
                        <h3 className="text-lg font-semibold text-gray-900 dark:text-white line-clamp-2 group-hover:text-purple-600 dark:group-hover:text-purple-400 transition-colors duration-200">
                          {module.title}
                        </h3>
                        <span className="text-xs bg-purple-100 dark:bg-purple-900/30 text-purple-800 dark:text-purple-400 px-2 py-1 rounded-full font-medium">
                          {module.id}
                        </span>
                      </div>
                      <p className="text-gray-600 dark:text-gray-400 text-sm mb-3 line-clamp-2">
                        {module.description}
                      </p>
                      <div className="flex justify-between items-center text-sm text-gray-500 dark:text-gray-400 mb-4">
                        <div className="flex items-center">
                          <Play className="h-4 w-4 mr-1" />
                          {module.sampleSize} samples
                        </div>
                        <div className="flex items-center">
                          <Clock className="h-4 w-4 mr-1" />
                          {module.estimatedTime}
                        </div>
                      </div>
                      <div className="flex items-center justify-between mb-4">
                        <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                          module.status === 'available'
                            ? 'bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400'
                            : 'bg-orange-100 text-orange-800 dark:bg-orange-900/20 dark:text-orange-400'
                        }`}>
                          {module.status === 'available' ? 'Available' : 'Coming Soon'}
                        </span>
                      </div>
                      <div className="flex gap-2">
                        <button
                          onClick={() => handleViewModule(module)}
                          className="flex-1 bg-blue-100 dark:bg-blue-900/20 hover:bg-blue-200 dark:hover:bg-blue-900/30 text-blue-700 dark:text-blue-400 px-3 py-2 rounded-md text-sm flex items-center justify-center gap-1 transition-all duration-200 hover:scale-105"
                        >
                          <Eye className="h-4 w-4" />
                          View
                        </button>
                        <button
                          onClick={() => handleEditModule(module)}
                          className="flex-1 bg-purple-100 dark:bg-purple-900/20 hover:bg-purple-200 dark:hover:bg-purple-900/30 text-purple-700 dark:text-purple-400 px-3 py-2 rounded-md text-sm flex items-center justify-center gap-1 transition-all duration-200 hover:scale-105"
                        >
                          <Edit className="h-4 w-4" />
                          Edit
                        </button>
                        <button
                          onClick={() => handleDeleteModule(module)}
                          className="flex-1 bg-red-100 dark:bg-red-900/20 hover:bg-red-200 dark:hover:bg-red-900/30 text-red-700 dark:text-red-400 px-3 py-2 rounded-md text-sm flex items-center justify-center gap-1 transition-all duration-200 hover:scale-105"
                        >
                          <Trash2 className="h-4 w-4" />
                          Delete
                        </button>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>

            {/* Pagination */}
            {totalPages > 1 && (
              <div className="px-6 py-4 border-t border-gray-200 dark:border-gray-700 flex items-center justify-between">
                <div className="text-sm text-gray-700 dark:text-gray-300">
                  Showing {startIndex + 1} to {Math.min(startIndex + itemsPerPage, filteredModules.length)} of {filteredModules.length} modules
                </div>
                <div className="flex items-center space-x-2">
                  <button
                    onClick={() => setCurrentPage(Math.max(1, currentPage - 1))}
                    disabled={currentPage === 1}
                    className="p-2 rounded-lg border border-gray-300 dark:border-gray-600 disabled:opacity-50 disabled:cursor-not-allowed hover:bg-gray-50 dark:hover:bg-gray-700 transition-all duration-200 hover:scale-105"
                  >
                    <ChevronLeft className="h-4 w-4" />
                  </button>
                  <span className="text-sm text-gray-700 dark:text-gray-300">
                    Page {currentPage} of {totalPages}
                  </span>
                  <button
                    onClick={() => setCurrentPage(Math.min(totalPages, currentPage + 1))}
                    disabled={currentPage === totalPages}
                    className="p-2 rounded-lg border border-gray-300 dark:border-gray-600 disabled:opacity-50 disabled:cursor-not-allowed hover:bg-gray-50 dark:hover:bg-gray-700 transition-all duration-200 hover:scale-105"
                  >
                    <ChevronRight className="h-4 w-4" />
                  </button>
                </div>
              </div>
            )}
          </>
        )}
      </div>

      {/* Add/Edit Modal */}
      <Modal
        isOpen={showAddModal || showEditModal}
        onClose={() => {
          setShowAddModal(false);
          setShowEditModal(false);
          resetForm();
        }}
        title={modalMode === 'add' ? 'Add New Module' : 'Edit Module'}
        preventClose={true}
        footer={
          <>
            <button
              onClick={() => {
                setShowAddModal(false);
                setShowEditModal(false);
                resetForm();
              }}
              disabled={isSubmitting}
              className="px-4 py-2 text-sm font-medium text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700 disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-200 hover:scale-105"
            >
              Cancel
            </button>
            <button
              onClick={handleSaveModule}
              disabled={isSubmitting}
              className="px-4 py-2 text-sm font-medium text-white bg-gradient-to-r from-purple-500 to-blue-500 rounded-lg hover:from-purple-600 hover:to-blue-600 disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-200 flex items-center hover:scale-105 shadow-lg hover:shadow-xl"
            >
              {isSubmitting ? (
                <>
                  <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                  Saving...
                </>
              ) : (
                modalMode === 'add' ? 'Add Module' : 'Save Changes'
              )}
            </button>
          </>
        }
      >
        <div className="space-y-4">
          {/* Upload Error Alert */}
          {uploadError && (
            <div className="mb-4 p-4 bg-red-50 border border-red-200 rounded-lg flex items-center">
              <div className="flex-shrink-0">
                <AlertCircle className="h-5 w-5 text-red-500" />
              </div>
              <div className="ml-3">
                <p className="text-sm text-red-800">{uploadError}</p>
              </div>
              <div className="ml-auto pl-3">
                <button
                  onClick={() => setUploadError(null)}
                  className="inline-flex text-red-400 hover:text-red-600"
                >
                  <svg className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                    <path fillRule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clipRule="evenodd" />
                  </svg>
                </button>
              </div>
            </div>
          )}
          
          <div>
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              Module Title <span className="text-red-500">*</span>
            </label>
            <input
              type="text"
              value={formData.title}
              onChange={(e) => {
                setFormData({ ...formData, title: e.target.value });
                if (errors.title) setErrors({ ...errors, title: undefined });
              }}
              className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent dark:bg-gray-700 dark:text-white transition-all duration-200 ${
                errors.title 
                  ? 'border-red-500 dark:border-red-500' 
                  : 'border-gray-300 dark:border-gray-600'
              }`}
              placeholder="Enter module title"
            />
            <ErrorMessage error={errors.title} />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              Description <span className="text-red-500">*</span>
            </label>
            <textarea
              value={formData.description}
              onChange={(e) => {
                setFormData({ ...formData, description: e.target.value });
                if (errors.description) setErrors({ ...errors, description: undefined });
              }}
              rows={4}
              className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent dark:bg-gray-700 dark:text-white transition-all duration-200 ${
                errors.description 
                  ? 'border-red-500 dark:border-red-500' 
                  : 'border-gray-300 dark:border-gray-600'
              }`}
              placeholder="Detailed description of the module content and learning objectives"
            />
            <ErrorMessage error={errors.description} />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              Long Description <span className="text-red-500">*</span>
            </label>
            <textarea
              value={formData.longDescription}
              onChange={(e) => {
                setFormData({ ...formData, longDescription: e.target.value });
                if (errors.longDescription) setErrors({ ...errors, longDescription: undefined });
              }}
              rows={6}
              className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent dark:bg-gray-700 dark:text-white transition-all duration-200 ${
                errors.longDescription 
                  ? 'border-red-500 dark:border-red-500' 
                  : 'border-gray-300 dark:border-gray-600'
              }`}
              placeholder="Detailed long description of the module content, learning objectives, and what students will accomplish"
            />
            <ErrorMessage error={errors.longDescription} />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              YouTube Video URL
            </label>
            <input
              type="url"
              value={formData.youtubeUrl}
              onChange={(e) => setFormData({ ...formData, youtubeUrl: e.target.value })}
              className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent dark:bg-gray-700 dark:text-white transition-all duration-200"
              placeholder="https://www.youtube.com/watch?v=..."
            />
            <p className="text-xs text-gray-500 dark:text-gray-400 mt-1">
              Optional: Add a YouTube video URL for this module. If not provided, a default video will be used.
            </p>
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              Thumbnail Image
            </label>
            <input
              type="file"
              accept="image/*"
              onChange={handleImageUpload}
              className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent dark:bg-gray-700 dark:text-white transition-all duration-200"
            />
            <p className="text-xs text-gray-500 dark:text-gray-400 mt-1">
              Supported formats: JPEG, PNG, GIF, WebP. Maximum size: 5MB.
            </p>
            {imagePreview && (
              <div className="mt-3">
                <img
                  src={imagePreview}
                  alt="Preview"
                  className="w-32 h-24 object-cover rounded-lg border border-gray-300 dark:border-gray-600"
                />
              </div>
            )}
          </div>

          <div className="grid grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                Sample Size <span className="text-red-500">*</span>
              </label>
              <input
                type="number"
                min="1"
                max="100"
                value={formData.sampleSize}
                onChange={(e) => {
                  setFormData({ ...formData, sampleSize: e.target.value });
                  if (errors.sampleSize) setErrors({ ...errors, sampleSize: undefined });
                }}
                className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent dark:bg-gray-700 dark:text-white transition-all duration-200 ${
                  errors.sampleSize 
                    ? 'border-red-500 dark:border-red-500' 
                    : 'border-gray-300 dark:border-gray-600'
                }`}
                placeholder="e.g., 25"
              />
              <ErrorMessage error={errors.sampleSize} />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                Estimated Time <span className="text-red-500">*</span>
              </label>
              <input
                type="number"
                min="1"
                value={formData.estimatedTime}
                onChange={(e) => {
                  setFormData({ ...formData, estimatedTime: e.target.value });
                  if (errors.estimatedTime) setErrors({ ...errors, estimatedTime: undefined });
                }}
                className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent dark:bg-gray-700 dark:text-white transition-all duration-200 ${
                  errors.estimatedTime 
                    ? 'border-red-500 dark:border-red-500' 
                    : 'border-gray-300 dark:border-gray-600'
                }`}
                placeholder="e.g., 45"
              />
              <ErrorMessage error={errors.estimatedTime} />
            </div>
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              Status <span className="text-red-500">*</span>
            </label>
            <select
              value={formData.status}
              onChange={(e) => setFormData({ ...formData, status: e.target.value as 'available' | 'coming-soon' })}
              className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent dark:bg-gray-700 dark:text-white transition-all duration-200"
            >
              <option value="available">Available</option>
              <option value="coming-soon">Coming Soon</option>
            </select>
          </div>
        </div>
      </Modal>

      {/* View Modal */}
      <Modal
        isOpen={showViewModal}
        onClose={() => setShowViewModal(false)}
        title="Module Details"
        size="lg"
      >
        {selectedModule && (
          <div className="space-y-6">
            <div className="aspect-video overflow-hidden rounded-lg">
              <img
                src={getImageUrl(selectedModule.thumbnail)}
                alt={selectedModule.title}
                className="w-full h-full object-cover"
              />
            </div>
            
            <div>
              <div className="flex items-center justify-between mb-4">
                <h2 className="text-2xl font-bold text-gray-900 dark:text-white">
                  {selectedModule.title}
                </h2>
                <span className="inline-block bg-purple-100 dark:bg-purple-900/30 text-purple-800 dark:text-purple-400 px-3 py-1 rounded-full text-sm font-medium">
                  {selectedModule.id}
                </span>
              </div>

              <p className="text-gray-600 dark:text-gray-400 mb-6">
                {selectedModule.description}
              </p>

              <div className="bg-gray-50 dark:bg-gray-700/50 rounded-lg p-4 mb-6">
                <h4 className="font-medium text-gray-900 dark:text-white mb-2">Detailed Description</h4>
                <p className="text-gray-600 dark:text-gray-400 text-sm leading-relaxed">
                  {selectedModule.longDescription || 'No detailed description available.'}
                </p>
              </div>

              <div className="grid grid-cols-2 gap-4">
                <div className="flex items-center space-x-3 p-3 bg-blue-50 dark:bg-blue-900/20 rounded-lg">
                  <Play className="h-5 w-5 text-blue-500" />
                  <div>
                    <p className="text-sm font-medium text-gray-900 dark:text-white">Sample Size</p>
                    <p className="text-sm text-gray-600 dark:text-gray-400">{selectedModule.sampleSize} samples</p>
                  </div>
                </div>
                <div className="flex items-center space-x-3 p-3 bg-green-50 dark:bg-green-900/20 rounded-lg">
                  <Clock className="h-5 w-5 text-green-500" />
                  <div>
                    <p className="text-sm font-medium text-gray-900 dark:text-white">Estimated Time</p>
                    <p className="text-sm text-gray-600 dark:text-gray-400">{selectedModule.estimatedTime}</p>
                  </div>
                </div>
              </div>

              <div className="mt-4">
                <span className={`inline-flex items-center px-3 py-1 rounded-full text-sm font-medium ${
                  selectedModule.status === 'available'
                    ? 'bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400'
                    : 'bg-orange-100 text-orange-800 dark:bg-orange-900/20 dark:text-orange-400'
                }`}>
                  {selectedModule.status === 'available' ? 'Available' : 'Coming Soon'}
                </span>
              </div>
            </div>
          </div>
        )}
      </Modal>

      {/* Delete Confirmation Modal */}
      <Modal
        isOpen={showDeleteModal}
        onClose={() => setShowDeleteModal(false)}
        title="Delete Module"
        footer={
          <>
            <button
              onClick={() => setShowDeleteModal(false)}
              className="px-4 py-2 text-sm font-medium text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700 transition-all duration-200 hover:scale-105"
            >
              Cancel
            </button>
            <button
              onClick={confirmDeleteModule}
              className="px-4 py-2 text-sm font-medium text-white bg-red-600 rounded-lg hover:bg-red-700 transition-all duration-200 hover:scale-105 shadow-lg hover:shadow-xl"
            >
              Delete Module
            </button>
          </>
        }
      >
        <div className="flex items-start space-x-3">
          <div className="flex-shrink-0">
            <AlertCircle className="h-6 w-6 text-red-600" />
          </div>
          <div>
            <p className="text-gray-700 dark:text-gray-300">
              Are you sure you want to delete the module <strong>"{selectedModule?.title}"</strong>?
            </p>
            <p className="text-sm text-gray-500 dark:text-gray-400 mt-2">
              This action cannot be undone and will permanently remove the module from the course.
            </p>
          </div>
        </div>
      </Modal>
    </div>
  );
};

export default AddModule;